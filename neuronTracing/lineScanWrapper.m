%%% lineScanWrapper.m
%%% Wrapper function for extracting the line scans from the image files
%%%
%%% Input arguments
%%% gFileIn = maximum projection file of green color channel
%%% rFileIn = maximum projection file of green color channel.  If you don't
%%%      want to trace a red image, just enter a bogus, nonexistent filename and
%%%      this will be ignored
%%% maskFile = csv mask file generated by makeMask
%%% toAvg = if true, the output line scan is the average of pixels
%%%      perpendicular to the spline at every point.  If false, the output line
%%%      scan is the sum of the pixels perpendicular to the spline.  SUM is
%%%      recommended
%%% toShowFigs = if true, display the traced spline and the line scans
%%% toPrint = if true, save the line scans
%%% rAligned (optional) = aligned red channel image.  if nonexistent, the
%%%      function aligns the red image to the green.
%%%
%%% Output arguments
%%% gLineScan = green line scan
%%% rLineScan = red line scan.  If there was no red file, this vector is empty
%%% 
%%% Output files (only if toPrint is true)
%%% *LineScans.csv = CSV file with two vectors:  green line scan and red line scan
%%% *LineScanInds.csv = CSV file with nterpolated locations of the pixels summed to
%%%      generate the line scan.  Its dimensions are length(lineScan) X 402 
%%%      The first 201 columns refer to the y-coordinate of each point, and
%%%      the second set of 201 columns refers to the x-coordinate.  So the
%%%      starting (x,y) location of the spline is in (1,302) and (1,101) in
%%%      this csv file
%%% *_overlay.bmp (only if toShowFigs is true) = green image with the spline overlaid
%%% *_gLineScan.bmp (only if toShowFigs is true) = plot of green line scan
%%% *_rLineScan.bmp (only if toShowFigs is true) = plot of red line scan

function [gLineScan,rLineScan] = lineScanWrapper(gFileIn,rFileIn,maskFile,toAvg,toShowFigs,toPrint,rAligned)

if ~exist('toAvg','var')
    toAvg = 0;
end

if ~exist('toShowFigs','var')
    toShowFigs = false;
end

if ~exist('toPrint','var')
    toPrint = false;
end

%%% Load mask information and calculate the green line scan
gIn1 = imread(gFileIn);
[gBackground,rBackground,postEP,axonMask] = loadMaskAndBG(maskFile);
gIn = gIn1 - gBackground;
[gLineScan,~,finalLineSumInds1] = getLineScanNoClicks(gIn,axonMask,toAvg);

%%% Calculate the red line scan if necessary
if exist(rFileIn,'file')
    rIn1 = imread(rFileIn);
    rIn = rIn1 - rBackground;
    if exist('rAligned','var') && ~isempty(rAligned)
        r = rAligned;
    else
        [~,r] = alignImages(gIn,rIn);
    end
    rNoMean1 = r - mean(r(:));
    rNoMean = rNoMean1 .* uint16(axonMask);
    [h,w] = size(rNoMean);
    [Y,X] = ndgrid(1:h,1:w);
    Xq = finalLineSumInds1(:,:,2);
    Yq = finalLineSumInds1(:,:,1);
    values = interp2(X,Y,double(rNoMean),Xq,Yq);
    values((Xq<1) | (Xq>w) | (Yq<1) | (Yq>h)) = 0;
    if toAvg
        rLineScan = sum(values,2)./sum(values>0,2);
    else
        rLineScan = sum(values,2);
    end
else
    rLineScan = zeros(size(gLineScan));
end

%%% Determine if we need to flip the line scans to be oriented correctly w.r.t. the minus-ends
[ls1R,ls1C] = ind2sub(size(axonMask),finalLineSumInds1(1,(size(finalLineSumInds1,2)+1)/2));
[ls2R,ls2C] = ind2sub(size(axonMask),finalLineSumInds1(end,(size(finalLineSumInds1,2)+1)/2));
distsToPost = [(ls1R-postEP(1))^2+(ls1C-postEP(2))^2;...
    (ls2R-postEP(1))^2+(ls2C-postEP(2))^2];
[~,ind] = min(distsToPost);
if ind == 2 %%% we need to flip the line scans
    gLineScan = gLineScan(end:-1:1);
    rLineScan = rLineScan(end:-1:1);
end

%%% Show or save the figures and data
if toShowFigs
    h1 = figure;
    imshow(linRescale(gIn));
    hold on;
    plot(finalLineSumInds1(:,101,2),finalLineSumInds1(:,101,1),'r.');
    plot(finalLineSumInds1(1,101,2),finalLineSumInds1(1,101,1),'g*');
    hold off;
    
    h2 = figure;
    plot(gLineScan)
    
    h3 = figure;
    plot(rLineScan);
end

if toPrint
    baseFile = strrep(maskFile,'Mask.csv','');
    if toShowFigs
        print(h1,strcat(baseFile,'_overlay'),'-dbitmap');
        print(h2,strcat(baseFile,'_gLineScan'),'-dbitmap');
        print(h3,strcat(baseFile,'_rLineScan'),'-dbitmap');
    end
    csvwrite(strcat(baseFile,'LineScans.csv'),[gLineScan, rLineScan]);
    csvwrite(strcat(baseFile,'LineScanInds.csv'),finalLineSumInds1);
end
